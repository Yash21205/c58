{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Yash\\\\Desktop\\\\class-56-reference-code-main\\\\components\\\\Media.js\";\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport * as ImagePicker from 'expo-image-picker';\nimport firebase from \"./FirebaseConfig\";\nimport storage from \"./FirebaseStorge\";\nexport default function Media() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      image = _useState2[0],\n      setImage = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isUploading = _useState4[0],\n      setIsUploading = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      percentUploaded = _useState6[0],\n      setPercentUploaded = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      quizName = _useState8[0],\n      setQuizName = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      _useState10 = _slicedToArray(_useState9, 2),\n      quizType = _useState10[0],\n      setQuizType = _useState10[1];\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$ImagePicker$re, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(Platform.OS !== 'web')) {\n                _context.next = 6;\n                break;\n              }\n\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(ImagePicker.requestCameraRollPermissionsAsync());\n\n            case 3:\n              _await$ImagePicker$re = _context.sent;\n              status = _await$ImagePicker$re.status;\n\n              if (status !== 'granted') {\n                alert('Sorry, we need camera roll permissions to make this work!');\n              }\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  function handlePickImgBtnClick() {\n    var result;\n    return _regeneratorRuntime.async(function handlePickImgBtnClick$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n              mediaTypes: ImagePicker.MediaTypeOptions.All,\n              aspect: [1, 1],\n              quality: 0.5\n            }));\n\n          case 2:\n            result = _context2.sent;\n\n            if (!result.cancelled) {\n              setImage(result.uri);\n            }\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function uploadImage(uri) {\n    var timeStamp, imageName, response, blob, storageRef, resp;\n    return _regeneratorRuntime.async(function uploadImage$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            timeStamp = Math.floor(Date.now() / 1000);\n            imageName = timeStamp + \".jpg\";\n            _context3.next = 4;\n            return _regeneratorRuntime.awrap(fetch(uri));\n\n          case 4:\n            response = _context3.sent;\n            _context3.next = 7;\n            return _regeneratorRuntime.awrap(response.blob());\n\n          case 7:\n            blob = _context3.sent;\n            storageRef = storage.ref().child(\"image/\" + imageName);\n            resp = storageRef.put(blob);\n            resp.on(firebase.storage.TaskEvent.STATE_CHANGED, function (snapshot) {\n              var percent = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n              console.log(\"percent\", percent);\n              setPercentUploaded(Math.floor(percent) + \" %\");\n            }, function (error) {\n              console.log(\"image upload error: \", error.message);\n              setPercentUploaded(\"\");\n            }, function () {\n              storageRef.getDownloadURL().then(function (downloadUrl) {\n                setImage(downloadUrl);\n                console.log(\"File available at:\", downloadUrl);\n              });\n            });\n            return _context3.abrupt(\"return\", resp);\n\n          case 12:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function handleUploadImageBtnClick() {\n    console.log(\"Upload Image btn pressed\", image);\n\n    if (image) {\n      setImage(\"\");\n      setIsUploading(true);\n      uploadImage(image).then(function () {\n        setIsUploading(false);\n        console.log(\"Successful!\");\n      }).catch(function (error) {\n        console.log(\"Fail to upload Image\", error);\n        setIsUploading(false);\n      });\n    }\n  }\n\n  return React.createElement(ScrollView, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }, \"Media Management\"), React.createElement(View, {\n    style: styles.divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  }), React.createElement(Text, {\n    style: styles.label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  }, \"Quiz Name\"), React.createElement(TextInput, {\n    style: styles.inputField,\n    placeholder: \"Enter your name\",\n    value: quizName,\n    onChangeText: function onChangeText(name) {\n      return setQuizName(name);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }), React.createElement(View, {\n    style: styles.divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }), React.createElement(View, {\n    style: styles.divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }), image ? React.createElement(React.Fragment, null, React.createElement(Image, {\n    source: {\n      uri: image\n    },\n    style: styles.image,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 25\n    }\n  }), React.createElement(View, {\n    style: styles.divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 25\n    }\n  })) : null, isUploading ? React.createElement(React.Fragment, null, React.createElement(ActivityIndicator, {\n    size: \"small\",\n    color: \"#0000ff\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 15\n    }\n  }), React.createElement(Text, {\n    style: {\n      textAlign: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 14\n    }\n  }, percentUploaded)) : null, React.createElement(Button, {\n    title: \"Select Image\",\n    onPress: handlePickImgBtnClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }\n  }), React.createElement(View, {\n    style: styles.divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 14\n    }\n  }), React.createElement(Button, {\n    title: \"Upload Image\",\n    onPress: handleUploadImageBtnClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#fff',\n    marginTop: 60,\n    paddingHorizontal: 30\n  },\n  title: {\n    fontWeight: '500',\n    fontSize: 30,\n    letterSpacing: 0.1,\n    textAlign: \"center\"\n  },\n  label: {\n    fontSize: 16,\n    lineHeight: 18,\n    color: '#666666',\n    marginBottom: 3\n  },\n  inputField: {\n    fontSize: 14,\n    borderWidth: 0,\n    borderBottomWidth: 1,\n    borderBottomColor: '#BFBFBF',\n    paddingVertical: 6\n  },\n  divider: {\n    paddingVertical: 8\n  },\n  image: {\n    alignSelf: \"center\",\n    width: \"100%\",\n    height: \"100%\"\n  },\n  percent: {\n    textAlign: \"center\"\n  }\n});","map":{"version":3,"sources":["C:/Users/Yash/Desktop/class-56-reference-code-main/components/Media.js"],"names":["React","useState","useEffect","ImagePicker","firebase","storage","Media","image","setImage","isUploading","setIsUploading","percentUploaded","setPercentUploaded","quizName","setQuizName","quizType","setQuizType","Platform","OS","requestCameraRollPermissionsAsync","status","alert","handlePickImgBtnClick","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","All","aspect","quality","result","cancelled","uri","uploadImage","timeStamp","Math","floor","Date","now","imageName","fetch","response","blob","storageRef","ref","child","resp","put","on","TaskEvent","STATE_CHANGED","snapshot","percent","bytesTransferred","totalBytes","console","log","error","message","getDownloadURL","then","downloadUrl","handleUploadImageBtnClick","catch","styles","container","title","divider","label","inputField","name","textAlign","StyleSheet","create","backgroundColor","marginTop","paddingHorizontal","fontWeight","fontSize","letterSpacing","lineHeight","color","marginBottom","borderWidth","borderBottomWidth","borderBottomColor","paddingVertical","alignSelf","width","height"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;;;;;;;;;AAGA,OAAO,KAAKC,WAAZ,MAA6B,mBAA7B;AAEA,OAAOC,QAAP;AACA,OAAOC,OAAP;AAGA,eAAe,SAASC,KAAT,GAAiB;AAAA,kBACFL,QAAQ,CAAC,IAAD,CADN;AAAA;AAAA,MACrBM,KADqB;AAAA,MACdC,QADc;;AAAA,mBAEUP,QAAQ,CAAC,KAAD,CAFlB;AAAA;AAAA,MAErBQ,WAFqB;AAAA,MAERC,cAFQ;;AAAA,mBAGkBT,QAAQ,CAAC,EAAD,CAH1B;AAAA;AAAA,MAGrBU,eAHqB;AAAA,MAGJC,kBAHI;;AAAA,mBAIIX,QAAQ,CAAC,EAAD,CAJZ;AAAA;AAAA,MAIrBY,QAJqB;AAAA,MAIXC,WAJW;;AAAA,mBAKIb,QAAQ,CAAC,EAAD,CALZ;AAAA;AAAA,MAKrBc,QALqB;AAAA,MAKXC,WALW;;AAQ5Bd,EAAAA,SAAS,CAAC,YAAM;AAEZ,KAAC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,oBACOe,QAAQ,CAACC,EAAT,KAAgB,KADvB;AAAA;AAAA;AAAA;;AAAA;AAAA,+CAEgCf,WAAW,CAACgB,iCAAZ,EAFhC;;AAAA;AAAA;AAEeC,cAAAA,MAFf,yBAEeA,MAFf;;AAGO,kBAAIA,MAAM,KAAK,SAAf,EAA0B;AACtBC,gBAAAA,KAAK,CAAC,2DAAD,CAAL;AACH;;AALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAQH,GAVQ,EAUN,EAVM,CAAT;;AAaA,WAAeC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACuBnB,WAAW,CAACoB,uBAAZ,CAAoC;AACnDC,cAAAA,UAAU,EAAErB,WAAW,CAACsB,gBAAZ,CAA6BC,GADU;AAEnDC,cAAAA,MAAM,EAAC,CAAC,CAAD,EAAG,CAAH,CAF4C;AAGnDC,cAAAA,OAAO,EAAE;AAH0C,aAApC,CADvB;;AAAA;AACQC,YAAAA,MADR;;AAOI,gBAAI,CAACA,MAAM,CAACC,SAAZ,EAAuB;AACnBtB,cAAAA,QAAQ,CAACqB,MAAM,CAACE,GAAR,CAAR;AACH;;AATL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAaH,WAAeC,WAAf,CAA2BD,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AACSE,YAAAA,SADT,GACqBC,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACC,GAAL,KAAa,IAAxB,CADrB;AAESC,YAAAA,SAFT,GAEqBL,SAAS,GAAG,MAFjC;AAAA;AAAA,6CAI0BM,KAAK,CAACR,GAAD,CAJ/B;;AAAA;AAISS,YAAAA,QAJT;AAAA;AAAA,6CAKsBA,QAAQ,CAACC,IAAT,EALtB;;AAAA;AAKSA,YAAAA,IALT;AAQSC,YAAAA,UART,GAQsBrC,OAAO,CAACsC,GAAR,GAAcC,KAAd,CAAoB,WAAWN,SAA/B,CARtB;AASSO,YAAAA,IATT,GASgBH,UAAU,CAACI,GAAX,CAAeL,IAAf,CAThB;AAUGI,YAAAA,IAAI,CAACE,EAAL,CACI3C,QAAQ,CAACC,OAAT,CAAiB2C,SAAjB,CAA2BC,aAD/B,EAEI,UAAAC,QAAQ,EAAI;AACR,kBAAMC,OAAO,GAAKD,QAAQ,CAACE,gBAAT,GAA4BF,QAAQ,CAACG,UAAtC,GAAoD,GAArE;AACAC,cAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBJ,OAAvB;AACAvC,cAAAA,kBAAkB,CAACsB,IAAI,CAACC,KAAL,CAAWgB,OAAX,IAAsB,IAAvB,CAAlB;AACH,aANL,EAOI,UAAAK,KAAK,EAAI;AACLF,cAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCC,KAAK,CAACC,OAA1C;AACA7C,cAAAA,kBAAkB,CAAC,EAAD,CAAlB;AACH,aAVL,EAWI,YAAM;AACF8B,cAAAA,UAAU,CAACgB,cAAX,GACKC,IADL,CACU,UAACC,WAAD,EAAiB;AACnBpD,gBAAAA,QAAQ,CAACoD,WAAD,CAAR;AACAN,gBAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCK,WAAlC;AACH,eAJL;AAKH,aAjBL;AAVH,8CA6BMf,IA7BN;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkCG,WAASgB,yBAAT,GAAqC;AACjCP,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwChD,KAAxC;;AAEA,QAAIA,KAAJ,EAAW;AACPC,MAAAA,QAAQ,CAAC,EAAD,CAAR;AACAE,MAAAA,cAAc,CAAC,IAAD,CAAd;AAGAsB,MAAAA,WAAW,CAACzB,KAAD,CAAX,CACKoD,IADL,CACU,YAAM;AACRjD,QAAAA,cAAc,CAAC,KAAD,CAAd;AACA4C,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACH,OAJL,EAKKO,KALL,CAKW,UAACN,KAAD,EAAW;AACdF,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCC,KAApC;AACA9C,QAAAA,cAAc,CAAC,KAAD,CAAd;AACH,OARL;AASH;AACJ;;AAID,SACI,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAEqD,MAAM,CAACC,SAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAED,MAAM,CAACE,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ,EAEI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEF,MAAM,CAACG,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAII,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEH,MAAM,CAACI,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAJJ,EAKI,oBAAC,SAAD;AACI,IAAA,KAAK,EAAEJ,MAAM,CAACK,UADlB;AAEI,IAAA,WAAW,EAAC,iBAFhB;AAGI,IAAA,KAAK,EAAEvD,QAHX;AAII,IAAA,YAAY,EAAE,sBAACwD,IAAD;AAAA,aAAUvD,WAAW,CAACuD,IAAD,CAArB;AAAA,KAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,EAWI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEN,MAAM,CAACG,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXJ,EAeI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEH,MAAM,CAACG,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfJ,EAoBQ3D,KAAK,GACD,0CACI,oBAAC,KAAD;AAAO,IAAA,MAAM,EAAE;AAAEwB,MAAAA,GAAG,EAAExB;AAAP,KAAf;AAA+B,IAAA,KAAK,EAAEwD,MAAM,CAACxD,KAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEwD,MAAM,CAACG,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADC,GAMC,IA1Bd,EA8BMzD,WAAW,GACX,0CAEA,oBAAC,iBAAD;AAAmB,IAAA,IAAI,EAAC,OAAxB;AAAgC,IAAA,KAAK,EAAC,SAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFA,EAGD,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAC6D,MAAAA,SAAS,EAAC;AAAX,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG3D,eADH,CAHC,CADW,GAON,IArCX,EAyCI,oBAAC,MAAD;AACI,IAAA,KAAK,EAAC,cADV;AAEI,IAAA,OAAO,EAAEW,qBAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAzCJ,EA6CK,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEyC,MAAM,CAACG,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA7CL,EA8CI,oBAAC,MAAD;AACI,IAAA,KAAK,EAAC,cADV;AAEI,IAAA,OAAO,EAAEL,yBAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA9CJ,CADJ;AAsDH;AAED,IAAME,MAAM,GAAGQ,UAAU,CAACC,MAAX,CAAkB;AAC7BR,EAAAA,SAAS,EAAE;AACPS,IAAAA,eAAe,EAAE,MADV;AAEPC,IAAAA,SAAS,EAAE,EAFJ;AAGPC,IAAAA,iBAAiB,EAAE;AAHZ,GADkB;AAO7BV,EAAAA,KAAK,EAAE;AACHW,IAAAA,UAAU,EAAE,KADT;AAEHC,IAAAA,QAAQ,EAAE,EAFP;AAGHC,IAAAA,aAAa,EAAE,GAHZ;AAIHR,IAAAA,SAAS,EAAE;AAJR,GAPsB;AAc7BH,EAAAA,KAAK,EAAE;AACHU,IAAAA,QAAQ,EAAE,EADP;AAEHE,IAAAA,UAAU,EAAE,EAFT;AAGHC,IAAAA,KAAK,EAAE,SAHJ;AAIHC,IAAAA,YAAY,EAAE;AAJX,GAdsB;AAqB7Bb,EAAAA,UAAU,EAAE;AACRS,IAAAA,QAAQ,EAAE,EADF;AAERK,IAAAA,WAAW,EAAE,CAFL;AAGRC,IAAAA,iBAAiB,EAAE,CAHX;AAIRC,IAAAA,iBAAiB,EAAE,SAJX;AAKRC,IAAAA,eAAe,EAAE;AALT,GArBiB;AA6B7BnB,EAAAA,OAAO,EAAE;AACLmB,IAAAA,eAAe,EAAE;AADZ,GA7BoB;AAiC7B9E,EAAAA,KAAK,EAAE;AACH+E,IAAAA,SAAS,EAAE,QADR;AAEHC,IAAAA,KAAK,EAAE,MAFJ;AAGHC,IAAAA,MAAM,EAAE;AAHL,GAjCsB;AAuC7BrC,EAAAA,OAAO,EAAE;AACLmB,IAAAA,SAAS,EAAE;AADN;AAvCoB,CAAlB,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { StyleSheet, Text, View, Platform, ScrollView, Image, TextInput, ActivityIndicator, Alert, Button } from 'react-native';\r\n\r\nimport * as ImagePicker from 'expo-image-picker';\r\n\r\nimport firebase from \"./FirebaseConfig\";\r\nimport storage from './FirebaseStorge';\r\n\r\n\r\nexport default function Media() {\r\n    const [image, setImage] = useState(null);\r\n    const [isUploading, setIsUploading] = useState(false);\r\n    const [percentUploaded, setPercentUploaded] = useState(\"\");\r\n    const [quizName, setQuizName] = useState(\"\");\r\n    const [quizType, setQuizType] = useState(\"\");\r\n\r\n    //component did mount\r\n    useEffect(() => {\r\n        //asking for permission to access phone's gallery\r\n        (async () => {\r\n            if (Platform.OS !== 'web') {\r\n                const { status } = await ImagePicker.requestCameraRollPermissionsAsync();\r\n                if (status !== 'granted') {\r\n                    alert('Sorry, we need camera roll permissions to make this work!');\r\n                }\r\n            }\r\n        })();\r\n    }, []);\r\n\r\n    //function to handle when Pick Image btn is clicked on\r\n    async function handlePickImgBtnClick() {\r\n        let result = await ImagePicker.launchImageLibraryAsync({\r\n            mediaTypes: ImagePicker.MediaTypeOptions.All,\r\n            aspect:[1,1],\r\n            quality: 0.5,\r\n        });\r\n\r\n        if (!result.cancelled) {\r\n            setImage(result.uri);\r\n        }\r\n    }\r\n\r\n //function to upload the image in firebase\r\n async function uploadImage(uri) {\r\n    const timeStamp = Math.floor(Date.now() / 1000);\r\n    const imageName = timeStamp + \".jpg\";\r\n\r\n    const response = await fetch(uri);\r\n    const blob = await response.blob();\r\n\r\n    //putting image in firebase\r\n    const storageRef = storage.ref().child(\"image/\" + imageName);\r\n    const resp = storageRef.put(blob);\r\n    resp.on(\r\n        firebase.storage.TaskEvent.STATE_CHANGED,\r\n        snapshot => {\r\n            const percent = ((snapshot.bytesTransferred / snapshot.totalBytes) * 100);\r\n            console.log(\"percent\", percent);\r\n            setPercentUploaded(Math.floor(percent) + \" %\");\r\n        },\r\n        error => {\r\n            console.log(\"image upload error: \", error.message);\r\n            setPercentUploaded(\"\");\r\n        },\r\n        () => {\r\n            storageRef.getDownloadURL()\r\n                .then((downloadUrl) => {     \r\n                    setImage(downloadUrl);\r\n                    console.log(\"File available at:\", downloadUrl);\r\n                })\r\n        }\r\n    );\r\nreturn resp;\r\n}\r\n\r\n\r\n    //function to handle when submit quiz btn is pressed on\r\n    function handleUploadImageBtnClick() {\r\n        console.log(\"Upload Image btn pressed\", image);\r\n\r\n        if (image) {\r\n            setImage(\"\");\r\n            setIsUploading(true);\r\n\r\n            //saving image to firebase\r\n            uploadImage(image)\r\n                .then(() => {\r\n                    setIsUploading(false);\r\n                    console.log(\"Successful!\")\r\n                })\r\n                .catch((error) => {\r\n                    console.log(\"Fail to upload Image\", error);\r\n                    setIsUploading(false);\r\n                });\r\n        }\r\n    }\r\n\r\n\r\n    //component rendering\r\n    return (\r\n        <ScrollView style={styles.container}>\r\n            <Text style={styles.title}>Media Management</Text>\r\n            <View style={styles.divider}></View>\r\n\r\n            <Text style={styles.label}>Quiz Name</Text>\r\n            <TextInput\r\n                style={styles.inputField}\r\n                placeholder=\"Enter your name\"\r\n                value={quizName}\r\n                onChangeText={(name) => setQuizName(name)}\r\n            />\r\n            <View style={styles.divider}></View>\r\n\r\n\r\n       \r\n            <View style={styles.divider}></View>\r\n\r\n           \r\n           \r\n            {\r\n                image ?\r\n                    <>\r\n                        <Image source={{ uri: image }} style={styles.image} />\r\n                        <View style={styles.divider}></View>\r\n                    </>\r\n\r\n                    : null\r\n            }\r\n\r\n            {\r\n              isUploading?\r\n              <>\r\n             \r\n              <ActivityIndicator size=\"small\" color=\"#0000ff\" />\r\n             <Text style={{textAlign:'center',}}>\r\n               {percentUploaded}\r\n             </Text>\r\n              </>: null\r\n            }\r\n\r\n            \r\n            <Button\r\n                title=\"Select Image\"\r\n                onPress={handlePickImgBtnClick}\r\n            />\r\n             <View style={styles.divider}></View>\r\n            <Button\r\n                title=\"Upload Image\"\r\n                onPress={handleUploadImageBtnClick}\r\n            />\r\n            \r\n        </ScrollView>\r\n    );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        backgroundColor: '#fff',\r\n        marginTop: 60,\r\n        paddingHorizontal: 30,\r\n    },\r\n\r\n    title: {\r\n        fontWeight: '500',\r\n        fontSize: 30,\r\n        letterSpacing: 0.1,\r\n        textAlign: \"center\",\r\n    },\r\n\r\n    label: {\r\n        fontSize: 16,\r\n        lineHeight: 18,\r\n        color: '#666666',\r\n        marginBottom: 3,\r\n    },\r\n\r\n    inputField: {\r\n        fontSize: 14,\r\n        borderWidth: 0,\r\n        borderBottomWidth: 1,\r\n        borderBottomColor: '#BFBFBF',\r\n        paddingVertical: 6,\r\n    },\r\n\r\n    divider: {\r\n        paddingVertical: 8,\r\n    },\r\n\r\n    image: {\r\n        alignSelf: \"center\",\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n    },\r\n\r\n    percent: {\r\n        textAlign: \"center\",\r\n    }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}